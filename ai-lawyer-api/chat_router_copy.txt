from fastapi import APIRouter, Request
from ..schemas.conversation import ChatRequest, ChatResponse
from ..schemas.response import ApiResponse
from ..services import conversation_service
from ..core.ai_client import qwen_client

router = APIRouter(prefix="/chat", tags=["chat"])

@router.post("", response_model=ApiResponse[ChatResponse])
async def chat_endpoint(payload: ChatRequest, request: Request) -> ApiResponse[ChatResponse]:
    user = getattr(request.state, "current_user", None)
    user_id = int(user["id"]) if user else None
    # 传入可选的 conv_id（默认 0 表示新建会话）
    reply, cid, title = await conversation_service.ask(user_id, payload.question, payload.conv_id or 0)
    return ApiResponse(result=ChatResponse(reply=reply, conv_id=cid, title=title))


@router.post("/analyze", response_model=ApiResponse[ChatResponse])
async def analyze_case(payload: ChatRequest) -> ApiResponse[ChatResponse]:
    """案件分析：直接调用 AI，不记录会话/消息。

    入参复用 ChatRequest 的 question 字段，传入案件事实与问题要点。
    返回值复用 ChatResponse，conv_id 固定为 0（表示无会话）。
    """
    system_prompt = (
        "你是一位中国法律领域的专业智能助理。请对用户提供的案件材料进行结构化分析，"
        "要求：\n"
        "1) 梳理关键事实与时间线，主体识别；\n"
        "2) 明确法律关系与争议焦点；\n"
        "3) 检索并引用可能适用的中国现行有效法律法规/司法解释（列出条目编号或名称）；\n"
        "4) 基于事实与法律进行论证分析，避免武断推断；\n"
        "5) 评估各方主张的成立要点与证明责任；\n"
        "6) 给出胜诉可能性、可行策略（诉讼/非诉）与合规风险提示；\n"
        "7) 结尾给出简明结论与后续建议。\n"
        "请保持客观中立、逻辑清晰、用词严谨，不涉及个人隐私泄露。"
    )

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": payload.question},
    ]

    reply = await qwen_client.chat(messages)
    return ApiResponse(result=ChatResponse(reply=reply, conv_id=0, title=None))

